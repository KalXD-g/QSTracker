#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
using namespace std;

// Function to generate a random maze. This function is generated by AI.
vector<vector<int>> generate_maze(int width, int height, int obstacle_percentage) {
    // Initialize a maze filled with paths (0)
    vector<vector<int>> maze(height, vector<int>(width, 0));

    // Define start and end points
    pair<int, int> start_point = {0, 0};
    pair<int, int> end_point = {height - 1, width - 1};

    // Calculate the number of obstacles based on the percentage
    int total_cells = width * height;
    int num_obstacles = total_cells * obstacle_percentage / 100;

    // Randomly place obstacles, ensuring start and end points remain clear
    srand(time(0)); // Seed for random number generation
    while (num_obstacles > 0) {
        int x = rand() % height;
        int y = rand() % width;
        
        if ((x != start_point.first || y != start_point.second) &&
            (x != end_point.first || y != end_point.second) && maze[x][y] == 0) {
            maze[x][y] = 1;  // Place an obstacle
            num_obstacles--;
        }
    }

    // Clear a direct path from start to end to ensure solvability
    pair<int, int> current_position = start_point;
    while (current_position != end_point) {
        maze[current_position.first][current_position.second] = 0; // Clear path
        if (current_position.first < end_point.first) {
            current_position.first++; // Move down
        } else if (current_position.second < end_point.second) {
            current_position.second++; // Move right
        }
    }

    return maze;
}

// Function to print the maze (for debugging purposes)
void print_maze(const vector<vector<int>>& maze) {
    for (const auto& row : maze) {
        for (int cell : row) {
            cout << cell << " ";
        }
        cout << endl;
    }
}

int main() {
    int width = 10, height = 10, obstacle_percentage = 30;
    vector<vector<int>> maze = generate_maze(width, height, obstacle_percentage);

    // Print the generated maze
    print_maze(maze);

    return 0;
}
